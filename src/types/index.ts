// ============================================
// Universal Project Manager - Type Definitions
// ============================================

/**
 * Supported project types
 */
export type ProjectType =
  | 'software_development'
  | 'marketing_campaign'
  | 'course_creation'
  | 'event_planning'
  | 'product_launch'
  | 'research_project'
  | 'content_creation'
  | 'construction'
  | 'business_operations'
  | 'creative_project'
  | 'custom';

/**
 * User experience levels - affects time estimates
 */
export type ExperienceLevel = 'novice' | 'intermediate' | 'expert';

/**
 * Task status types
 */
export type TaskStatus = 'pending' | 'in-progress' | 'complete' | 'blocked';

/**
 * Project metadata
 */
export interface ProjectMeta {
  name: string;
  description: string;
  projectType: ProjectType;
  experienceLevel: ExperienceLevel;
  lead: string;
  status: 'planning' | 'active' | 'on-hold' | 'complete';
  startDate?: string;
  targetEndDate?: string;
  budget?: number;
  timeline?: string;
}

/**
 * Individual task definition
 */
export interface Task {
  id: string;
  task: string;
  phase: string;
  phaseTitle: string;
  category: string;
  baseEstHours: number;           // Base time estimate before experience adjustment
  adjustedEstHours: number;        // Adjusted for experience level
  sopReference?: string;           // Standard Operating Procedure reference
  dependencies?: string[];         // IDs of tasks this depends on
  criticalPath?: boolean;          // Is this on the critical path?
  aiGenerated?: boolean;           // Was this task generated by AI?
}

/**
 * Task state tracking (user progress)
 */
export interface TaskState {
  estHours?: number;               // Estimated hours (adjusted)
  actualHours?: string;            // Actual hours spent
  status?: TaskStatus;             // Current status
  notes?: string;                  // User notes
  blockedReason?: string;          // Why is task blocked
  completedDate?: string;          // When was it completed
}

/**
 * Phase definition
 */
export interface Phase {
  phaseId: string;
  phaseTitle: string;
  description: string;
  color: string;
  typicalDuration: number;         // Days
  sopReference?: string;
}

/**
 * Risk factor
 */
export interface RiskFactor {
  category: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
  mitigation: string;
}

/**
 * AI Analysis Request
 */
export interface AIAnalysisRequest {
  projectDescription: string;
  projectType: ProjectType;
  experienceLevel: ExperienceLevel;
  budget?: number;
  timeline?: string;
  teamSize?: number;
}

/**
 * AI Analysis Response
 */
export interface AIAnalysisResponse {
  suggestedTasks: Task[];
  suggestedPhases: Phase[];
  estimatedTimeline: string;
  riskFactors: RiskFactor[];
  recommendations: string[];
  confidence: number;               // 0-1 confidence score
}

/**
 * Progress statistics
 */
export interface Stats {
  overall: {
    total: number;
    completed: number;
    inProgress: number;
    blocked: number;
  };
  totalEst: number;
  totalActual: number;
  overruns: number;
}

/**
 * AI-generated progress report
 */
export interface AIReport {
  generatedAt: string;
  projectId: string;
  analysis: {
    progressAssessment: string;
    schedulePerformance: string;
    costPerformance: string;
    qualityMetrics: string;
  };
  recommendations: {
    immediate: string[];
    shortTerm: string[];
    longTerm: string[];
  };
  predictiveInsights: {
    completionForecast: string;
    budgetForecast: string;
    riskAreas: RiskFactor[];
  };
  exportData: {
    rawMetrics: any;
    formattedReport: string;
    apiPayload: any;
  };
}

/**
 * Project template
 */
export interface ProjectTemplate {
  id: string;
  name: string;
  projectType: ProjectType;
  phases: Phase[];
  standardTasks: Task[];
  bestPractices: string[];
  commonPitfalls?: string[];
  estimatedDuration?: string;
  skillsRequired?: string[];
}

/**
 * Export format types
 */
export type ExportFormat = 'csv' | 'json' | 'pdf' | 'api';

/**
 * Move history for undo functionality
 */
export interface MoveHistory {
  taskId: string;
  fromPhase: string;
  toPhase: string;
  timestamp: number;
}
